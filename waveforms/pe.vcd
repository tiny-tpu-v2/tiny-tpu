$date
	Sun May 25 23:41:04 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module pe $end
$var wire 1 ! clk $end
$var wire 1 " pe_accept_w $end
$var wire 16 # pe_input_in [15:0] $end
$var wire 16 $ pe_psum_in [15:0] $end
$var wire 1 % pe_switch_in $end
$var wire 1 & pe_valid_in $end
$var wire 16 ' pe_weight_in [15:0] $end
$var wire 1 ( rst $end
$var wire 16 ) pe_psum_out [15:0] $end
$var wire 16 * mult_out [15:0] $end
$var wire 16 + mac_out [15:0] $end
$var reg 16 , pe_input_out [15:0] $end
$var reg 1 - pe_switch_out $end
$var reg 1 . pe_valid_out $end
$var reg 16 / pe_weight_out [15:0] $end
$var reg 16 0 weight_reg_active [15:0] $end
$var reg 16 1 weight_reg_inactive [15:0] $end
$scope module adder $end
$var wire 16 2 inb [15:0] $end
$var wire 17 3 res [16:0] $end
$var wire 1 4 overflow $end
$var wire 16 5 out [15:0] $end
$var wire 16 6 inbz [15:0] $end
$var wire 16 7 inaz [15:0] $end
$var wire 16 8 ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 9 out [15:0] $end
$var wire 16 : in [15:0] $end
$var reg 8 ; ini [7:0] $end
$var reg 16 < inr [15:0] $end
$var reg 8 = outf [7:0] $end
$var reg 8 > outi [7:0] $end
$var reg 1 ? overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 @ in [15:0] $end
$var wire 16 A out [15:0] $end
$var reg 8 B ini [7:0] $end
$var reg 16 C inr [15:0] $end
$var reg 8 D outf [7:0] $end
$var reg 8 E outi [7:0] $end
$var reg 1 F overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 G in [16:0] $end
$var wire 16 H out [15:0] $end
$var reg 9 I ini [8:0] $end
$var reg 17 J inr [16:0] $end
$var reg 8 K outf [7:0] $end
$var reg 8 L outi [7:0] $end
$var reg 1 4 overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 M ina [15:0] $end
$var wire 16 N inb [15:0] $end
$var wire 32 O res [31:0] $end
$var wire 1 P overflow $end
$var wire 16 Q out [15:0] $end
$scope module res_zoom $end
$var wire 32 R in [31:0] $end
$var wire 16 S out [15:0] $end
$var reg 16 T ini [15:0] $end
$var reg 24 U inr [23:0] $end
$var reg 8 V outf [7:0] $end
$var reg 8 W outi [7:0] $end
$var reg 1 P overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
0F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
0?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
bx 1
b0 0
b0 /
0.
x-
b0 ,
b0 +
b0 *
b0 )
0(
b0 '
0&
z%
b0 $
b0 #
0"
1!
$end
#5000
0!
#10000
b100010100000000 '
1"
0-
1!
#15000
0!
#20000
b101000000000 '
b100010100000000 /
b100010100000000 1
1!
#25000
0!
#30000
b11001000000000 +
b11001000000000 5
b11001000000000 H
b110010 L
b110010 I
b11001000000000 J
b11001000000000 3
b11001000000000 G
b11001000000000 6
b11001000000000 A
b110010 E
b110010 B
b11001000000000 C
b11001000000000 $
b11001000000000 2
b11001000000000 @
b1000000000 #
b1000000000 M
1&
1%
0"
b101000000000 /
b101000000000 1
1!
#35000
0!
#40000
0&
0%
b100011000000000 +
b100011000000000 5
b100011000000000 H
b1000110 L
b1000110 I
b100011000000000 J
b100011000000000 3
b100011000000000 G
b1010000000000 7
b1010000000000 9
b10100 >
b10100 ;
b1010000000000 <
b1010000000000 *
b1010000000000 8
b1010000000000 :
b1010000000000 Q
b1010000000000 S
b10100 W
b10100 T
b100011000000000 )
b1010000000000 U
1.
b1000000000 ,
b0 /
1-
b101000000000000000000 O
b101000000000000000000 R
b101000000000 0
b101000000000 N
1!
#45000
0!
#50000
b0 )
0.
0-
1!
#55000
0!
#60000
1!
#65000
0!
#70000
1!
#70001
