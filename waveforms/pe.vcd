$date
	Mon May 26 20:53:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module pe $end
$var wire 1 ! clk $end
$var wire 1 " pe_accept_w_in $end
$var wire 16 # pe_input_in [15:0] $end
$var wire 16 $ pe_psum_in [15:0] $end
$var wire 1 % pe_switch_in $end
$var wire 1 & pe_valid_in $end
$var wire 16 ' pe_weight_in [15:0] $end
$var wire 1 ( rst $end
$var wire 16 ) pe_psum_out [15:0] $end
$var wire 16 * mult_out [15:0] $end
$var wire 16 + mac_out [15:0] $end
$var reg 16 , goes_into_mac [15:0] $end
$var reg 1 - pe_accept_w_out $end
$var reg 16 . pe_input_out [15:0] $end
$var reg 1 / pe_switch_out $end
$var reg 1 0 pe_valid_out $end
$var reg 16 1 pe_weight_out [15:0] $end
$var reg 16 2 weight_reg_active [15:0] $end
$var reg 16 3 weight_reg_inactive [15:0] $end
$scope module adder $end
$var wire 16 4 inb [15:0] $end
$var wire 17 5 res [16:0] $end
$var wire 1 6 overflow $end
$var wire 16 7 out [15:0] $end
$var wire 16 8 inbz [15:0] $end
$var wire 16 9 inaz [15:0] $end
$var wire 16 : ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 ; out [15:0] $end
$var wire 16 < in [15:0] $end
$var reg 8 = ini [7:0] $end
$var reg 16 > inr [15:0] $end
$var reg 8 ? outf [7:0] $end
$var reg 8 @ outi [7:0] $end
$var reg 1 A overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 B in [15:0] $end
$var wire 16 C out [15:0] $end
$var reg 8 D ini [7:0] $end
$var reg 16 E inr [15:0] $end
$var reg 8 F outf [7:0] $end
$var reg 8 G outi [7:0] $end
$var reg 1 H overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 I in [16:0] $end
$var wire 16 J out [15:0] $end
$var reg 9 K ini [8:0] $end
$var reg 17 L inr [16:0] $end
$var reg 8 M outf [7:0] $end
$var reg 8 N outi [7:0] $end
$var reg 1 6 overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 O ina [15:0] $end
$var wire 16 P inb [15:0] $end
$var wire 32 Q res [31:0] $end
$var wire 1 R overflow $end
$var wire 16 S out [15:0] $end
$scope module res_zoom $end
$var wire 32 T in [31:0] $end
$var wire 16 U out [15:0] $end
$var reg 16 V ini [15:0] $end
$var reg 24 W inr [23:0] $end
$var reg 8 X outf [7:0] $end
$var reg 8 Y outi [7:0] $end
$var reg 1 R overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 Y
b0 X
b0 W
b0 V
b0 U
bx T
b0 S
0R
bx Q
b0 P
bx O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
0H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
0A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
06
b0 5
b0 4
b0 3
b0 2
b0 1
00
0/
b0 .
x-
bx ,
b0 +
b0 *
b0 )
0(
b0 '
0&
z%
b0 $
b0 #
0"
1!
$end
#5000
0!
#10000
b1000000000 '
1"
0-
1!
#15000
0!
#20000
b100000000 '
b1000000000 1
b1000000000 3
1-
1!
#25000
0!
#30000
b10100000000 #
1&
1%
0"
b100000000 1
b100000000 3
1!
#35000
0!
#40000
0&
0%
b0 #
b10100000000 )
b10100000000 +
b10100000000 7
b10100000000 J
b101 N
b101 K
b10100000000 L
b10100000000 5
b10100000000 I
b10100000000 9
b10100000000 ;
b101 @
b101 =
b10100000000 >
b10100000000 *
b10100000000 :
b10100000000 <
b10100000000 S
b10100000000 U
b101 Y
b101 V
b10100000000 W
b1010000000000000000 Q
b1010000000000000000 T
b10100000000 ,
b10100000000 O
b10100000000 .
b0 1
1/
b100000000 2
b100000000 P
10
0-
1!
#45000
0!
#50000
b0 )
0/
00
1!
#55000
0!
#60000
1!
#65000
0!
#70000
1!
#70001
